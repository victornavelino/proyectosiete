    def save_model(self, request, obj, form, change):
        
        # Al guardar, copiar el contenido del campo_texto de la instancia relacionada
        if form.cleaned_data["content_object"]:
            obj.articulo = form.cleaned_data["content_object"].nombre
        if form.cleaned_data["deposito_foraneo"]:
            obj.deposito = form.cleaned_data["deposito_foraneo"].nombre
        if form.cleaned_data["sucursal_foraneo"]:
            obj.sucursal = form.cleaned_data["sucursal_foraneo"].nombre
        if form.cleaned_data["usuario"]:
            obj.usuario = form.cleaned_data["usuario"]

        try:

            articulo_sucursal=ArticuloSucursal.objects.get(articulo=form.cleaned_data["articulo_foraneo"],
                                                         sucursal=form.cleaned_data["sucursal_foraneo"])
            articulo_sucursal.cantidad+=obj.cantidad
            articulo_sucursal.save()
        except:
            ArticuloSucursal.objects.create(articulo=form.cleaned_data["articulo_foraneo"],
                                            sucursal=form.cleaned_data["sucursal_foraneo"],
                                            cantidad=obj.cantidad)
        obj.save()

        




    def get_form(self, request, obj=None, *args, **kwargs):
        form = super(MovimientoArticuloAdmin, self).get_form(request, *args, **kwargs)
        print(request.user.username)
        if obj is None:
            form.base_fields['usuario'].initial = str(request.user.username)
        else:
            form.base_fields['usuario'].initial = obj.usuario
        form.base_fields['usuario'].disabled = True
        return form



    content_object= autocomplete.Select2GenericForeignKeyModelField(
        model_choice=[(Deposito, 'nombre'),(Sucursal, 'nombre')],
        widget=autocomplete.QuerySetSequenceSelect2,
    )
